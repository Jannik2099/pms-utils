import enum
import pms_utils.atom
from typing import Callable, ClassVar, Iterator

class DependExpr:
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, arg0: DependExpr) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Iterator[pms_utils.atom.Atom | DependExpr]: ...
    def __ne__(self, arg0: DependExpr) -> bool: ...
    @property
    def conditional(self) -> UseConditional | GroupHeaderOp | None: ...
    @property
    def nodes(self) -> list[pms_utils.atom.Atom | DependExpr]: ...

class GroupHeaderOp(enum.Enum):
    __new__: ClassVar[Callable] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[object]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    any_of: ClassVar[GroupHeaderOp] = ...
    at_most_one_of: ClassVar[GroupHeaderOp] = ...
    exactly_one_of: ClassVar[GroupHeaderOp] = ...

class UseConditional:
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, arg0: UseConditional) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg0: UseConditional) -> bool: ...
    @property
    def negate(self) -> bool: ...
    @property
    def useflag(self) -> pms_utils.atom.Useflag: ...
